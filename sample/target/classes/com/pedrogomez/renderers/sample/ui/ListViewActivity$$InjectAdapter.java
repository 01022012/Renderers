// Code generated by dagger-compiler.  Do not edit.
package com.pedrogomez.renderers.sample.ui;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<ListViewActivity>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code ListViewActivity} and its
 * dependencies.
 *
 * Being a {@code Provider<ListViewActivity>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<ListViewActivity>} and handling injection
 * of annotated fields.
 */
public final class ListViewActivity$$InjectAdapter extends Binding<ListViewActivity>
    implements Provider<ListViewActivity>, MembersInjector<ListViewActivity> {
  private Binding<com.pedrogomez.renderers.RendererAdapter<com.pedrogomez.renderers.sample.model.Video>> adapter;
  private Binding<BaseActivity> supertype;

  public ListViewActivity$$InjectAdapter() {
    super("com.pedrogomez.renderers.sample.ui.ListViewActivity", "members/com.pedrogomez.renderers.sample.ui.ListViewActivity", NOT_SINGLETON, ListViewActivity.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    adapter = (Binding<com.pedrogomez.renderers.RendererAdapter<com.pedrogomez.renderers.sample.model.Video>>) linker.requestBinding("com.pedrogomez.renderers.RendererAdapter<com.pedrogomez.renderers.sample.model.Video>", ListViewActivity.class, getClass().getClassLoader());
    supertype = (Binding<BaseActivity>) linker.requestBinding("members/com.pedrogomez.renderers.sample.ui.BaseActivity", ListViewActivity.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(adapter);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<ListViewActivity>}.
   */
  @Override
  public ListViewActivity get() {
    ListViewActivity result = new ListViewActivity();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<ListViewActivity>}.
   */
  @Override
  public void injectMembers(ListViewActivity object) {
    object.adapter = adapter.get();
    supertype.injectMembers(object);
  }

}
