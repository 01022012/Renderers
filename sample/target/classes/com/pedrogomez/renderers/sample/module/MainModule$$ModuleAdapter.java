// Code generated by dagger-compiler.  Do not edit.
package com.pedrogomez.renderers.sample.module;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class MainModule$$ModuleAdapter extends ModuleAdapter<MainModule> {
  private static final String[] INJECTS = { "members/com.pedrogomez.renderers.sample.SampleApplication", "members/com.pedrogomez.renderers.sample.ui.MainActivity", "members/com.pedrogomez.renderers.sample.ui.ListViewActivity", "members/com.pedrogomez.renderers.sample.ui.RecyclerViewActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public MainModule$$ModuleAdapter() {
    super(com.pedrogomez.renderers.sample.module.MainModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, MainModule module) {
    bindings.contributeProvidesBinding("com.pedrogomez.renderers.RendererAdapter<com.pedrogomez.renderers.sample.model.Video>", new ProvideVideoRendererAdapterProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.pedrogomez.renderers.RVRendererAdapter<com.pedrogomez.renderers.sample.model.Video>", new ProvideVideoRVRendererAdapterProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.view.LayoutInflater", new ProvideLayoutInflaterProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.content.Context", new ProvideContextProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.pedrogomez.renderers.sample.ui.renderers.VideoRenderer$OnVideoClicked", new ProvideOnVideoClickedProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.pedrogomez.renderers.RendererAdapter<com.pedrogomez.renderers.sample.model.Video>>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.pedrogomez.renderers.RendererAdapter<com.pedrogomez.renderers.sample.model.Video>} and its
   * dependencies.
   *
   * Being a {@code Provider<com.pedrogomez.renderers.RendererAdapter<com.pedrogomez.renderers.sample.model.Video>>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideVideoRendererAdapterProvidesAdapter extends ProvidesBinding<com.pedrogomez.renderers.RendererAdapter<com.pedrogomez.renderers.sample.model.Video>>
      implements Provider<com.pedrogomez.renderers.RendererAdapter<com.pedrogomez.renderers.sample.model.Video>> {
    private final MainModule module;
    private Binding<com.pedrogomez.renderers.sample.model.RandomVideoCollectionGenerator> randomVideoCollectionGenerator;
    private Binding<android.view.LayoutInflater> layoutInflater;
    private Binding<com.pedrogomez.renderers.sample.ui.builder.VideoRendererBuilder> rendererBuilder;

    public ProvideVideoRendererAdapterProvidesAdapter(MainModule module) {
      super("com.pedrogomez.renderers.RendererAdapter<com.pedrogomez.renderers.sample.model.Video>", NOT_SINGLETON, "com.pedrogomez.renderers.sample.module.MainModule", "provideVideoRendererAdapter");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      randomVideoCollectionGenerator = (Binding<com.pedrogomez.renderers.sample.model.RandomVideoCollectionGenerator>) linker.requestBinding("com.pedrogomez.renderers.sample.model.RandomVideoCollectionGenerator", MainModule.class, getClass().getClassLoader());
      layoutInflater = (Binding<android.view.LayoutInflater>) linker.requestBinding("android.view.LayoutInflater", MainModule.class, getClass().getClassLoader());
      rendererBuilder = (Binding<com.pedrogomez.renderers.sample.ui.builder.VideoRendererBuilder>) linker.requestBinding("com.pedrogomez.renderers.sample.ui.builder.VideoRendererBuilder", MainModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(randomVideoCollectionGenerator);
      getBindings.add(layoutInflater);
      getBindings.add(rendererBuilder);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.pedrogomez.renderers.RendererAdapter<com.pedrogomez.renderers.sample.model.Video>>}.
     */
    @Override
    public com.pedrogomez.renderers.RendererAdapter<com.pedrogomez.renderers.sample.model.Video> get() {
      return module.provideVideoRendererAdapter(randomVideoCollectionGenerator.get(), layoutInflater.get(), rendererBuilder.get());
    }
  }

  /**
   * A {@code Binding<com.pedrogomez.renderers.RVRendererAdapter<com.pedrogomez.renderers.sample.model.Video>>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.pedrogomez.renderers.RVRendererAdapter<com.pedrogomez.renderers.sample.model.Video>} and its
   * dependencies.
   *
   * Being a {@code Provider<com.pedrogomez.renderers.RVRendererAdapter<com.pedrogomez.renderers.sample.model.Video>>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideVideoRVRendererAdapterProvidesAdapter extends ProvidesBinding<com.pedrogomez.renderers.RVRendererAdapter<com.pedrogomez.renderers.sample.model.Video>>
      implements Provider<com.pedrogomez.renderers.RVRendererAdapter<com.pedrogomez.renderers.sample.model.Video>> {
    private final MainModule module;
    private Binding<com.pedrogomez.renderers.sample.model.RandomVideoCollectionGenerator> randomVideoCollectionGenerator;
    private Binding<android.view.LayoutInflater> layoutInflater;
    private Binding<com.pedrogomez.renderers.sample.ui.builder.VideoRendererBuilder> rendererBuilder;

    public ProvideVideoRVRendererAdapterProvidesAdapter(MainModule module) {
      super("com.pedrogomez.renderers.RVRendererAdapter<com.pedrogomez.renderers.sample.model.Video>", NOT_SINGLETON, "com.pedrogomez.renderers.sample.module.MainModule", "provideVideoRVRendererAdapter");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      randomVideoCollectionGenerator = (Binding<com.pedrogomez.renderers.sample.model.RandomVideoCollectionGenerator>) linker.requestBinding("com.pedrogomez.renderers.sample.model.RandomVideoCollectionGenerator", MainModule.class, getClass().getClassLoader());
      layoutInflater = (Binding<android.view.LayoutInflater>) linker.requestBinding("android.view.LayoutInflater", MainModule.class, getClass().getClassLoader());
      rendererBuilder = (Binding<com.pedrogomez.renderers.sample.ui.builder.VideoRendererBuilder>) linker.requestBinding("com.pedrogomez.renderers.sample.ui.builder.VideoRendererBuilder", MainModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(randomVideoCollectionGenerator);
      getBindings.add(layoutInflater);
      getBindings.add(rendererBuilder);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.pedrogomez.renderers.RVRendererAdapter<com.pedrogomez.renderers.sample.model.Video>>}.
     */
    @Override
    public com.pedrogomez.renderers.RVRendererAdapter<com.pedrogomez.renderers.sample.model.Video> get() {
      return module.provideVideoRVRendererAdapter(randomVideoCollectionGenerator.get(), layoutInflater.get(), rendererBuilder.get());
    }
  }

  /**
   * A {@code Binding<android.view.LayoutInflater>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.view.LayoutInflater>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideLayoutInflaterProvidesAdapter extends ProvidesBinding<android.view.LayoutInflater>
      implements Provider<android.view.LayoutInflater> {
    private final MainModule module;

    public ProvideLayoutInflaterProvidesAdapter(MainModule module) {
      super("android.view.LayoutInflater", NOT_SINGLETON, "com.pedrogomez.renderers.sample.module.MainModule", "provideLayoutInflater");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.view.LayoutInflater>}.
     */
    @Override
    public android.view.LayoutInflater get() {
      return module.provideLayoutInflater();
    }
  }

  /**
   * A {@code Binding<android.content.Context>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.Context>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideContextProvidesAdapter extends ProvidesBinding<android.content.Context>
      implements Provider<android.content.Context> {
    private final MainModule module;

    public ProvideContextProvidesAdapter(MainModule module) {
      super("android.content.Context", NOT_SINGLETON, "com.pedrogomez.renderers.sample.module.MainModule", "provideContext");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.Context>}.
     */
    @Override
    public android.content.Context get() {
      return module.provideContext();
    }
  }

  /**
   * A {@code Binding<com.pedrogomez.renderers.sample.ui.renderers.VideoRenderer.OnVideoClicked>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.pedrogomez.renderers.sample.ui.renderers.VideoRenderer.OnVideoClicked} and its
   * dependencies.
   *
   * Being a {@code Provider<com.pedrogomez.renderers.sample.ui.renderers.VideoRenderer.OnVideoClicked>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideOnVideoClickedProvidesAdapter extends ProvidesBinding<com.pedrogomez.renderers.sample.ui.renderers.VideoRenderer.OnVideoClicked>
      implements Provider<com.pedrogomez.renderers.sample.ui.renderers.VideoRenderer.OnVideoClicked> {
    private final MainModule module;
    private Binding<OnVideoClickedListener> impl;

    public ProvideOnVideoClickedProvidesAdapter(MainModule module) {
      super("com.pedrogomez.renderers.sample.ui.renderers.VideoRenderer$OnVideoClicked", NOT_SINGLETON, "com.pedrogomez.renderers.sample.module.MainModule", "provideOnVideoClicked");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      impl = (Binding<OnVideoClickedListener>) linker.requestBinding("com.pedrogomez.renderers.sample.module.OnVideoClickedListener", MainModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(impl);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.pedrogomez.renderers.sample.ui.renderers.VideoRenderer.OnVideoClicked>}.
     */
    @Override
    public com.pedrogomez.renderers.sample.ui.renderers.VideoRenderer.OnVideoClicked get() {
      return module.provideOnVideoClicked(impl.get());
    }
  }
}
